// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: api_container_service.proto

package kurtosis_core_rpc_api_bindings

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FileGenerationOptions_FileTypeToGenerate int32

const (
	FileGenerationOptions_FILE FileGenerationOptions_FileTypeToGenerate = 0
)

// Enum value maps for FileGenerationOptions_FileTypeToGenerate.
var (
	FileGenerationOptions_FileTypeToGenerate_name = map[int32]string{
		0: "FILE",
	}
	FileGenerationOptions_FileTypeToGenerate_value = map[string]int32{
		"FILE": 0,
	}
)

func (x FileGenerationOptions_FileTypeToGenerate) Enum() *FileGenerationOptions_FileTypeToGenerate {
	p := new(FileGenerationOptions_FileTypeToGenerate)
	*p = x
	return p
}

func (x FileGenerationOptions_FileTypeToGenerate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileGenerationOptions_FileTypeToGenerate) Descriptor() protoreflect.EnumDescriptor {
	return file_api_container_service_proto_enumTypes[0].Descriptor()
}

func (FileGenerationOptions_FileTypeToGenerate) Type() protoreflect.EnumType {
	return &file_api_container_service_proto_enumTypes[0]
}

func (x FileGenerationOptions_FileTypeToGenerate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileGenerationOptions_FileTypeToGenerate.Descriptor instead.
func (FileGenerationOptions_FileTypeToGenerate) EnumDescriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{8, 0}
}

// ==============================================================================================
//                                     Load Lambda
// ==============================================================================================
type LoadLambdaArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LambdaId       string `protobuf:"bytes,1,opt,name=lambda_id,json=lambdaId,proto3" json:"lambda_id,omitempty"`
	ContainerImage string `protobuf:"bytes,2,opt,name=container_image,json=containerImage,proto3" json:"container_image,omitempty"`
	// The serialized params object that will be passed, as-is, to the Lambda for starting
	// The serialization format is dependent on the Lambda
	SerializedParams string `protobuf:"bytes,3,opt,name=serialized_params,json=serializedParams,proto3" json:"serialized_params,omitempty"`
}

func (x *LoadLambdaArgs) Reset() {
	*x = LoadLambdaArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadLambdaArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadLambdaArgs) ProtoMessage() {}

func (x *LoadLambdaArgs) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadLambdaArgs.ProtoReflect.Descriptor instead.
func (*LoadLambdaArgs) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{0}
}

func (x *LoadLambdaArgs) GetLambdaId() string {
	if x != nil {
		return x.LambdaId
	}
	return ""
}

func (x *LoadLambdaArgs) GetContainerImage() string {
	if x != nil {
		return x.ContainerImage
	}
	return ""
}

func (x *LoadLambdaArgs) GetSerializedParams() string {
	if x != nil {
		return x.SerializedParams
	}
	return ""
}

// ==============================================================================================
//                                     Execute Lambda
// ==============================================================================================
type ExecuteLambdaArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LambdaId string `protobuf:"bytes,1,opt,name=lambda_id,json=lambdaId,proto3" json:"lambda_id,omitempty"`
	// Serialized parameters data for the Lambda function
	// The serialization format is dependent on the Lambda
	SerializedParams string `protobuf:"bytes,2,opt,name=serialized_params,json=serializedParams,proto3" json:"serialized_params,omitempty"`
}

func (x *ExecuteLambdaArgs) Reset() {
	*x = ExecuteLambdaArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteLambdaArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteLambdaArgs) ProtoMessage() {}

func (x *ExecuteLambdaArgs) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteLambdaArgs.ProtoReflect.Descriptor instead.
func (*ExecuteLambdaArgs) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{1}
}

func (x *ExecuteLambdaArgs) GetLambdaId() string {
	if x != nil {
		return x.LambdaId
	}
	return ""
}

func (x *ExecuteLambdaArgs) GetSerializedParams() string {
	if x != nil {
		return x.SerializedParams
	}
	return ""
}

type ExecuteLambdaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Serialized result data from the Lambda function
	// The serialization format is dependent on the Lambda
	SerializedResult string `protobuf:"bytes,1,opt,name=serialized_result,json=serializedResult,proto3" json:"serialized_result,omitempty"`
}

func (x *ExecuteLambdaResponse) Reset() {
	*x = ExecuteLambdaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteLambdaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteLambdaResponse) ProtoMessage() {}

func (x *ExecuteLambdaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteLambdaResponse.ProtoReflect.Descriptor instead.
func (*ExecuteLambdaResponse) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{2}
}

func (x *ExecuteLambdaResponse) GetSerializedResult() string {
	if x != nil {
		return x.SerializedResult
	}
	return ""
}

// ==============================================================================================
//                                     Get Lambda Info
// ==============================================================================================
type GetLambdaInfoArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LambdaId string `protobuf:"bytes,1,opt,name=lambda_id,json=lambdaId,proto3" json:"lambda_id,omitempty"`
}

func (x *GetLambdaInfoArgs) Reset() {
	*x = GetLambdaInfoArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLambdaInfoArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLambdaInfoArgs) ProtoMessage() {}

func (x *GetLambdaInfoArgs) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLambdaInfoArgs.ProtoReflect.Descriptor instead.
func (*GetLambdaInfoArgs) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetLambdaInfoArgs) GetLambdaId() string {
	if x != nil {
		return x.LambdaId
	}
	return ""
}

type GetLambdaInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAddr string `protobuf:"bytes,1,opt,name=ip_addr,json=ipAddr,proto3" json:"ip_addr,omitempty"`
}

func (x *GetLambdaInfoResponse) Reset() {
	*x = GetLambdaInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLambdaInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLambdaInfoResponse) ProtoMessage() {}

func (x *GetLambdaInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLambdaInfoResponse.ProtoReflect.Descriptor instead.
func (*GetLambdaInfoResponse) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetLambdaInfoResponse) GetIpAddr() string {
	if x != nil {
		return x.IpAddr
	}
	return ""
}

// ==============================================================================================
//                                     Register Service
// ==============================================================================================
type RegisterServiceArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID that will be used to identify the service going forward
	ServiceId string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// If emptystring, the default partition ID will be used
	PartitionId string `protobuf:"bytes,2,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
}

func (x *RegisterServiceArgs) Reset() {
	*x = RegisterServiceArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterServiceArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterServiceArgs) ProtoMessage() {}

func (x *RegisterServiceArgs) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterServiceArgs.ProtoReflect.Descriptor instead.
func (*RegisterServiceArgs) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{5}
}

func (x *RegisterServiceArgs) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *RegisterServiceArgs) GetPartitionId() string {
	if x != nil {
		return x.PartitionId
	}
	return ""
}

type RegisterServiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The IP address that the service will receive when it starts
	IpAddr string `protobuf:"bytes,1,opt,name=ip_addr,json=ipAddr,proto3" json:"ip_addr,omitempty"`
}

func (x *RegisterServiceResponse) Reset() {
	*x = RegisterServiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterServiceResponse) ProtoMessage() {}

func (x *RegisterServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterServiceResponse.ProtoReflect.Descriptor instead.
func (*RegisterServiceResponse) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{6}
}

func (x *RegisterServiceResponse) GetIpAddr() string {
	if x != nil {
		return x.IpAddr
	}
	return ""
}

// ==============================================================================================
//                                     Generate Files
// ==============================================================================================
type GenerateFilesArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The service ID for which the files will be generated
	ServiceId string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// Mapping of meaningful-to-user string ID -> options controlling how the file gets generated
	FilesToGenerate map[string]*FileGenerationOptions `protobuf:"bytes,2,rep,name=files_to_generate,json=filesToGenerate,proto3" json:"files_to_generate,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GenerateFilesArgs) Reset() {
	*x = GenerateFilesArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateFilesArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateFilesArgs) ProtoMessage() {}

func (x *GenerateFilesArgs) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateFilesArgs.ProtoReflect.Descriptor instead.
func (*GenerateFilesArgs) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{7}
}

func (x *GenerateFilesArgs) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *GenerateFilesArgs) GetFilesToGenerate() map[string]*FileGenerationOptions {
	if x != nil {
		return x.FilesToGenerate
	}
	return nil
}

type FileGenerationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileTypeToGenerate FileGenerationOptions_FileTypeToGenerate `protobuf:"varint,1,opt,name=file_type_to_generate,json=fileTypeToGenerate,proto3,enum=api_container_api.FileGenerationOptions_FileTypeToGenerate" json:"file_type_to_generate,omitempty"`
}

func (x *FileGenerationOptions) Reset() {
	*x = FileGenerationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileGenerationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileGenerationOptions) ProtoMessage() {}

func (x *FileGenerationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileGenerationOptions.ProtoReflect.Descriptor instead.
func (*FileGenerationOptions) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{8}
}

func (x *FileGenerationOptions) GetFileTypeToGenerate() FileGenerationOptions_FileTypeToGenerate {
	if x != nil {
		return x.FileTypeToGenerate
	}
	return FileGenerationOptions_FILE
}

type GenerateFilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mapping of meaningful-to-user string ID (as passed in via the request) to the filepath (RELATIVE to the suite
	//  execution volume root!) where the file was generated
	GeneratedFileRelativeFilepaths map[string]string `protobuf:"bytes,1,rep,name=generated_file_relative_filepaths,json=generatedFileRelativeFilepaths,proto3" json:"generated_file_relative_filepaths,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GenerateFilesResponse) Reset() {
	*x = GenerateFilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateFilesResponse) ProtoMessage() {}

func (x *GenerateFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateFilesResponse.ProtoReflect.Descriptor instead.
func (*GenerateFilesResponse) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{9}
}

func (x *GenerateFilesResponse) GetGeneratedFileRelativeFilepaths() map[string]string {
	if x != nil {
		return x.GeneratedFileRelativeFilepaths
	}
	return nil
}

// ==============================================================================================
//                                         Load Static Files
// ==============================================================================================
type RegisterStaticFilesArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A set of user_defined_id identifying static files that the client would like the API container to have available, for use in mounting the files to services
	StaticFilesSet map[string]bool `protobuf:"bytes,1,rep,name=static_files_set,json=staticFilesSet,proto3" json:"static_files_set,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *RegisterStaticFilesArgs) Reset() {
	*x = RegisterStaticFilesArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterStaticFilesArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterStaticFilesArgs) ProtoMessage() {}

func (x *RegisterStaticFilesArgs) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterStaticFilesArgs.ProtoReflect.Descriptor instead.
func (*RegisterStaticFilesArgs) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{10}
}

func (x *RegisterStaticFilesArgs) GetStaticFilesSet() map[string]bool {
	if x != nil {
		return x.StaticFilesSet
	}
	return nil
}

type RegisterStaticFilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map of user_defined_id -> filepath_relative_to_enclave_volume_root, where user_defined_id corresponds to the
	//  IDs passed in in RegisterStaticFilesArgs
	// The filepaths returned are where the client should copy the data of the file
	// The API container guarantees that an empty file will already have been created at the destination
	StaticFileDestRelativeFilepaths map[string]string `protobuf:"bytes,1,rep,name=static_file_dest_relative_filepaths,json=staticFileDestRelativeFilepaths,proto3" json:"static_file_dest_relative_filepaths,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RegisterStaticFilesResponse) Reset() {
	*x = RegisterStaticFilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterStaticFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterStaticFilesResponse) ProtoMessage() {}

func (x *RegisterStaticFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterStaticFilesResponse.ProtoReflect.Descriptor instead.
func (*RegisterStaticFilesResponse) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{11}
}

func (x *RegisterStaticFilesResponse) GetStaticFileDestRelativeFilepaths() map[string]string {
	if x != nil {
		return x.StaticFileDestRelativeFilepaths
	}
	return nil
}

// ==============================================================================================
//                                         Load Static Files
// ==============================================================================================
type LoadStaticFilesArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The service ID into whose namespace the static files should be copied
	ServiceId string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// The "set" of static files, identified by a user-defined ID key, that should be copied into the service's file namespace
	//  The user-defined ID key should correspond to the keys of the static files declared in the testsuite's getStaticFiles() function
	StaticFiles map[string]bool `protobuf:"bytes,2,rep,name=static_files,json=staticFiles,proto3" json:"static_files,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *LoadStaticFilesArgs) Reset() {
	*x = LoadStaticFilesArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadStaticFilesArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadStaticFilesArgs) ProtoMessage() {}

func (x *LoadStaticFilesArgs) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadStaticFilesArgs.ProtoReflect.Descriptor instead.
func (*LoadStaticFilesArgs) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{12}
}

func (x *LoadStaticFilesArgs) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *LoadStaticFilesArgs) GetStaticFiles() map[string]bool {
	if x != nil {
		return x.StaticFiles
	}
	return nil
}

type LoadStaticFilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A mapping of user_defined_id -> filepath_relative_to_suite_execution_volume_root where the static files have been copied
	CopiedStaticFileRelativeFilepaths map[string]string `protobuf:"bytes,1,rep,name=copied_static_file_relative_filepaths,json=copiedStaticFileRelativeFilepaths,proto3" json:"copied_static_file_relative_filepaths,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LoadStaticFilesResponse) Reset() {
	*x = LoadStaticFilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadStaticFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadStaticFilesResponse) ProtoMessage() {}

func (x *LoadStaticFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadStaticFilesResponse.ProtoReflect.Descriptor instead.
func (*LoadStaticFilesResponse) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{13}
}

func (x *LoadStaticFilesResponse) GetCopiedStaticFileRelativeFilepaths() map[string]string {
	if x != nil {
		return x.CopiedStaticFileRelativeFilepaths
	}
	return nil
}

// ==============================================================================================
//                                        Start Service
// ==============================================================================================
type StartServiceArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the previously-registered service that should be started
	ServiceId   string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	DockerImage string `protobuf:"bytes,2,opt,name=docker_image,json=dockerImage,proto3" json:"docker_image,omitempty"`
	// "Set" of ports that the running service will listen on
	// This is a string because it's Docker port specification syntax, e.g. "80" (default TCP) or "80/udp"
	UsedPorts map[string]bool `protobuf:"bytes,3,rep,name=used_ports,json=usedPorts,proto3" json:"used_ports,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Corresponds to a Dockerfile's ENTRYPOINT directive; leave blank to do no overriding
	EntrypointArgs []string `protobuf:"bytes,4,rep,name=entrypoint_args,json=entrypointArgs,proto3" json:"entrypoint_args,omitempty"`
	// Corresponds to a Dockerfile's CMD directive; leave blank to do no overriding
	CmdArgs []string `protobuf:"bytes,5,rep,name=cmd_args,json=cmdArgs,proto3" json:"cmd_args,omitempty"`
	// Docker environment variables that should be set in the service's container
	DockerEnvVars map[string]string `protobuf:"bytes,6,rep,name=docker_env_vars,json=dockerEnvVars,proto3" json:"docker_env_vars,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The full path where the API container should execute the suite execution volume on the service container
	SuiteExecutionVolMntDirpath string `protobuf:"bytes,7,opt,name=suite_execution_vol_mnt_dirpath,json=suiteExecutionVolMntDirpath,proto3" json:"suite_execution_vol_mnt_dirpath,omitempty"`
	// Mapping of artifact_url -> filepath_on_container_to_mount_artifact_contents
	FilesArtifactMountDirpaths map[string]string `protobuf:"bytes,8,rep,name=files_artifact_mount_dirpaths,json=filesArtifactMountDirpaths,proto3" json:"files_artifact_mount_dirpaths,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *StartServiceArgs) Reset() {
	*x = StartServiceArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartServiceArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartServiceArgs) ProtoMessage() {}

func (x *StartServiceArgs) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartServiceArgs.ProtoReflect.Descriptor instead.
func (*StartServiceArgs) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{14}
}

func (x *StartServiceArgs) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *StartServiceArgs) GetDockerImage() string {
	if x != nil {
		return x.DockerImage
	}
	return ""
}

func (x *StartServiceArgs) GetUsedPorts() map[string]bool {
	if x != nil {
		return x.UsedPorts
	}
	return nil
}

func (x *StartServiceArgs) GetEntrypointArgs() []string {
	if x != nil {
		return x.EntrypointArgs
	}
	return nil
}

func (x *StartServiceArgs) GetCmdArgs() []string {
	if x != nil {
		return x.CmdArgs
	}
	return nil
}

func (x *StartServiceArgs) GetDockerEnvVars() map[string]string {
	if x != nil {
		return x.DockerEnvVars
	}
	return nil
}

func (x *StartServiceArgs) GetSuiteExecutionVolMntDirpath() string {
	if x != nil {
		return x.SuiteExecutionVolMntDirpath
	}
	return ""
}

func (x *StartServiceArgs) GetFilesArtifactMountDirpaths() map[string]string {
	if x != nil {
		return x.FilesArtifactMountDirpaths
	}
	return nil
}

type StartServiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mapping of used_ports_provided_in_input_args -> ip_and_port_on_host_where_port_is_bound (in ip:port form)
	// Ports will only be in this map if they were successfully bound to a host port; if no ports were bound, then
	// this map will be empty
	UsedPortsHostPortBindings map[string]*PortBinding `protobuf:"bytes,1,rep,name=used_ports_host_port_bindings,json=usedPortsHostPortBindings,proto3" json:"used_ports_host_port_bindings,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *StartServiceResponse) Reset() {
	*x = StartServiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartServiceResponse) ProtoMessage() {}

func (x *StartServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartServiceResponse.ProtoReflect.Descriptor instead.
func (*StartServiceResponse) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{15}
}

func (x *StartServiceResponse) GetUsedPortsHostPortBindings() map[string]*PortBinding {
	if x != nil {
		return x.UsedPortsHostPortBindings
	}
	return nil
}

type PortBinding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceIp   string `protobuf:"bytes,1,opt,name=interface_ip,json=interfaceIp,proto3" json:"interface_ip,omitempty"`
	InterfacePort string `protobuf:"bytes,2,opt,name=interface_port,json=interfacePort,proto3" json:"interface_port,omitempty"`
}

func (x *PortBinding) Reset() {
	*x = PortBinding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortBinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortBinding) ProtoMessage() {}

func (x *PortBinding) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortBinding.ProtoReflect.Descriptor instead.
func (*PortBinding) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{16}
}

func (x *PortBinding) GetInterfaceIp() string {
	if x != nil {
		return x.InterfaceIp
	}
	return ""
}

func (x *PortBinding) GetInterfacePort() string {
	if x != nil {
		return x.InterfacePort
	}
	return ""
}

// ==============================================================================================
//                                       Get Service Info
// ==============================================================================================
type GetServiceInfoArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//The service ID to get the info from
	ServiceId string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
}

func (x *GetServiceInfoArgs) Reset() {
	*x = GetServiceInfoArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceInfoArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceInfoArgs) ProtoMessage() {}

func (x *GetServiceInfoArgs) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceInfoArgs.ProtoReflect.Descriptor instead.
func (*GetServiceInfoArgs) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{17}
}

func (x *GetServiceInfoArgs) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

type GetServiceInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The IP address of the service
	IpAddr string `protobuf:"bytes,1,opt,name=ip_addr,json=ipAddr,proto3" json:"ip_addr,omitempty"`
	// The full path where the test suite execution volume is mounted on the service
	SuiteExecutionVolumeMountDirpath string `protobuf:"bytes,2,opt,name=suite_execution_volume_mount_dirpath,json=suiteExecutionVolumeMountDirpath,proto3" json:"suite_execution_volume_mount_dirpath,omitempty"`
}

func (x *GetServiceInfoResponse) Reset() {
	*x = GetServiceInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceInfoResponse) ProtoMessage() {}

func (x *GetServiceInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceInfoResponse.ProtoReflect.Descriptor instead.
func (*GetServiceInfoResponse) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{18}
}

func (x *GetServiceInfoResponse) GetIpAddr() string {
	if x != nil {
		return x.IpAddr
	}
	return ""
}

func (x *GetServiceInfoResponse) GetSuiteExecutionVolumeMountDirpath() string {
	if x != nil {
		return x.SuiteExecutionVolumeMountDirpath
	}
	return ""
}

// ==============================================================================================
//                                        Remove Service
// ==============================================================================================
type RemoveServiceArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceId string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// How long to wait for the service to gracefully stop before hard killing it
	ContainerStopTimeoutSeconds uint64 `protobuf:"varint,2,opt,name=container_stop_timeout_seconds,json=containerStopTimeoutSeconds,proto3" json:"container_stop_timeout_seconds,omitempty"`
}

func (x *RemoveServiceArgs) Reset() {
	*x = RemoveServiceArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveServiceArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveServiceArgs) ProtoMessage() {}

func (x *RemoveServiceArgs) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveServiceArgs.ProtoReflect.Descriptor instead.
func (*RemoveServiceArgs) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{19}
}

func (x *RemoveServiceArgs) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *RemoveServiceArgs) GetContainerStopTimeoutSeconds() uint64 {
	if x != nil {
		return x.ContainerStopTimeoutSeconds
	}
	return 0
}

// ==============================================================================================
//                                          Repartition
// ==============================================================================================
type RepartitionArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Definition of partitionId -> services that should be inside the partition after repartitioning
	PartitionServices map[string]*PartitionServices `protobuf:"bytes,1,rep,name=partition_services,json=partitionServices,proto3" json:"partition_services,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Definition of partitionIdA -> partitionIdB -> information defining the connection between A <-> B
	PartitionConnections map[string]*PartitionConnections `protobuf:"bytes,2,rep,name=partition_connections,json=partitionConnections,proto3" json:"partition_connections,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Information about the default inter-partition connection to set up if one is not defined in the
	//  partition connections map
	DefaultConnection *PartitionConnectionInfo `protobuf:"bytes,3,opt,name=default_connection,json=defaultConnection,proto3" json:"default_connection,omitempty"`
}

func (x *RepartitionArgs) Reset() {
	*x = RepartitionArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepartitionArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepartitionArgs) ProtoMessage() {}

func (x *RepartitionArgs) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepartitionArgs.ProtoReflect.Descriptor instead.
func (*RepartitionArgs) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{20}
}

func (x *RepartitionArgs) GetPartitionServices() map[string]*PartitionServices {
	if x != nil {
		return x.PartitionServices
	}
	return nil
}

func (x *RepartitionArgs) GetPartitionConnections() map[string]*PartitionConnections {
	if x != nil {
		return x.PartitionConnections
	}
	return nil
}

func (x *RepartitionArgs) GetDefaultConnection() *PartitionConnectionInfo {
	if x != nil {
		return x.DefaultConnection
	}
	return nil
}

type PartitionServices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// "Set" of service IDs in partition
	ServiceIdSet map[string]bool `protobuf:"bytes,1,rep,name=service_id_set,json=serviceIdSet,proto3" json:"service_id_set,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *PartitionServices) Reset() {
	*x = PartitionServices{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionServices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionServices) ProtoMessage() {}

func (x *PartitionServices) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionServices.ProtoReflect.Descriptor instead.
func (*PartitionServices) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{21}
}

func (x *PartitionServices) GetServiceIdSet() map[string]bool {
	if x != nil {
		return x.ServiceIdSet
	}
	return nil
}

type PartitionConnections struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionInfo map[string]*PartitionConnectionInfo `protobuf:"bytes,1,rep,name=connection_info,json=connectionInfo,proto3" json:"connection_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PartitionConnections) Reset() {
	*x = PartitionConnections{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionConnections) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionConnections) ProtoMessage() {}

func (x *PartitionConnections) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionConnections.ProtoReflect.Descriptor instead.
func (*PartitionConnections) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{22}
}

func (x *PartitionConnections) GetConnectionInfo() map[string]*PartitionConnectionInfo {
	if x != nil {
		return x.ConnectionInfo
	}
	return nil
}

type PartitionConnectionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether network traffic is allowed between the two partitions
	IsBlocked bool `protobuf:"varint,1,opt,name=is_blocked,json=isBlocked,proto3" json:"is_blocked,omitempty"`
}

func (x *PartitionConnectionInfo) Reset() {
	*x = PartitionConnectionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionConnectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionConnectionInfo) ProtoMessage() {}

func (x *PartitionConnectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionConnectionInfo.ProtoReflect.Descriptor instead.
func (*PartitionConnectionInfo) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{23}
}

func (x *PartitionConnectionInfo) GetIsBlocked() bool {
	if x != nil {
		return x.IsBlocked
	}
	return false
}

// ==============================================================================================
//                                          Exec Command
// ==============================================================================================
type ExecCommandArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The service ID of the container that the command should be executed in
	ServiceId   string   `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	CommandArgs []string `protobuf:"bytes,2,rep,name=command_args,json=commandArgs,proto3" json:"command_args,omitempty"`
}

func (x *ExecCommandArgs) Reset() {
	*x = ExecCommandArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecCommandArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecCommandArgs) ProtoMessage() {}

func (x *ExecCommandArgs) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecCommandArgs.ProtoReflect.Descriptor instead.
func (*ExecCommandArgs) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{24}
}

func (x *ExecCommandArgs) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *ExecCommandArgs) GetCommandArgs() []string {
	if x != nil {
		return x.CommandArgs
	}
	return nil
}

type ExecCommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExitCode  int32  `protobuf:"varint,1,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	LogOutput []byte `protobuf:"bytes,2,opt,name=log_output,json=logOutput,proto3" json:"log_output,omitempty"`
}

func (x *ExecCommandResponse) Reset() {
	*x = ExecCommandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecCommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecCommandResponse) ProtoMessage() {}

func (x *ExecCommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecCommandResponse.ProtoReflect.Descriptor instead.
func (*ExecCommandResponse) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{25}
}

func (x *ExecCommandResponse) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *ExecCommandResponse) GetLogOutput() []byte {
	if x != nil {
		return x.LogOutput
	}
	return nil
}

// ==============================================================================================
//                              Wait For Endpoint Availability
// ==============================================================================================
type WaitForEndpointAvailabilityArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//The ID of the service to check.
	ServiceId string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	//The port of the service to check. For instance 8080
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	//The path of the service to check. It mustn't start with the first slash. For instance `service/health`
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	//The number of seconds to wait until executing the first HTTP call
	InitialDelaySeconds uint32 `protobuf:"varint,4,opt,name=initial_delay_seconds,json=initialDelaySeconds,proto3" json:"initial_delay_seconds,omitempty"`
	//Max number of HTTP call attempts that this will execute until giving up and returning an error
	Retries uint32 `protobuf:"varint,5,opt,name=retries,proto3" json:"retries,omitempty"`
	//Number of milliseconds to wait between retries
	RetriesDelayMilliseconds uint32 `protobuf:"varint,6,opt,name=retries_delay_milliseconds,json=retriesDelayMilliseconds,proto3" json:"retries_delay_milliseconds,omitempty"`
	//If the endpoint returns this value, the service will be marked as available (e.g. Hello World).
	BodyText string `protobuf:"bytes,7,opt,name=body_text,json=bodyText,proto3" json:"body_text,omitempty"`
}

func (x *WaitForEndpointAvailabilityArgs) Reset() {
	*x = WaitForEndpointAvailabilityArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitForEndpointAvailabilityArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForEndpointAvailabilityArgs) ProtoMessage() {}

func (x *WaitForEndpointAvailabilityArgs) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForEndpointAvailabilityArgs.ProtoReflect.Descriptor instead.
func (*WaitForEndpointAvailabilityArgs) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{26}
}

func (x *WaitForEndpointAvailabilityArgs) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *WaitForEndpointAvailabilityArgs) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *WaitForEndpointAvailabilityArgs) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *WaitForEndpointAvailabilityArgs) GetInitialDelaySeconds() uint32 {
	if x != nil {
		return x.InitialDelaySeconds
	}
	return 0
}

func (x *WaitForEndpointAvailabilityArgs) GetRetries() uint32 {
	if x != nil {
		return x.Retries
	}
	return 0
}

func (x *WaitForEndpointAvailabilityArgs) GetRetriesDelayMilliseconds() uint32 {
	if x != nil {
		return x.RetriesDelayMilliseconds
	}
	return 0
}

func (x *WaitForEndpointAvailabilityArgs) GetBodyText() string {
	if x != nil {
		return x.BodyText
	}
	return ""
}

// ==============================================================================================
//                                      Execute Bulk Commands
// ==============================================================================================
type ExecuteBulkCommandsArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Commands, serialized as JSON
	SerializedCommands string `protobuf:"bytes,1,opt,name=serialized_commands,json=serializedCommands,proto3" json:"serialized_commands,omitempty"`
}

func (x *ExecuteBulkCommandsArgs) Reset() {
	*x = ExecuteBulkCommandsArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_container_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteBulkCommandsArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteBulkCommandsArgs) ProtoMessage() {}

func (x *ExecuteBulkCommandsArgs) ProtoReflect() protoreflect.Message {
	mi := &file_api_container_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteBulkCommandsArgs.ProtoReflect.Descriptor instead.
func (*ExecuteBulkCommandsArgs) Descriptor() ([]byte, []int) {
	return file_api_container_service_proto_rawDescGZIP(), []int{27}
}

func (x *ExecuteBulkCommandsArgs) GetSerializedCommands() string {
	if x != nil {
		return x.SerializedCommands
	}
	return ""
}

var File_api_container_service_proto protoreflect.FileDescriptor

var file_api_container_service_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x61,
	0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x83, 0x01,
	0x0a, 0x0e, 0x4c, 0x6f, 0x61, 0x64, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x41, 0x72, 0x67, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x49, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x22, 0x5d, 0x0a, 0x11, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x4c, 0x61,
	0x6d, 0x62, 0x64, 0x61, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x6d, 0x62,
	0x64, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6d,
	0x62, 0x64, 0x61, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x22, 0x44, 0x0a, 0x15, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x4c, 0x61, 0x6d,
	0x62, 0x64, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x30, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4c,
	0x61, 0x6d, 0x62, 0x64, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x49, 0x64, 0x22, 0x30, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x22, 0x57, 0x0a, 0x13,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x72, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x17, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x22, 0x87, 0x02, 0x0a, 0x11, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x72, 0x67, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x65,
	0x0a, 0x11, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x61, 0x70, 0x69, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x72, 0x67, 0x73, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x1a, 0x6c, 0x0a, 0x14, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x54, 0x6f,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xa7, 0x01, 0x0a, 0x15, 0x46, 0x69, 0x6c, 0x65, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6e, 0x0a,
	0x15, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x61,
	0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x54,
	0x6f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x12, 0x66, 0x69, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x54, 0x6f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x22, 0x1e, 0x0a,
	0x12, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x54, 0x6f, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x00, 0x22, 0x84, 0x02,
	0x0a, 0x15, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x97, 0x01, 0x0a, 0x21, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x1e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68,
	0x73, 0x1a, 0x51, 0x0a, 0x23, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xc6, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x72, 0x67, 0x73,
	0x12, 0x68, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x61, 0x70, 0x69,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x41, 0x72, 0x67, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x53, 0x65, 0x74, 0x1a, 0x41, 0x0a, 0x13, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x95, 0x02,
	0x0a, 0x1b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa1, 0x01,
	0x0a, 0x23, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x65,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x61, 0x70,
	0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x1f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68,
	0x73, 0x1a, 0x52, 0x0a, 0x24, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x44,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x70,
	0x61, 0x74, 0x68, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd0, 0x01, 0x0a, 0x13, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x0c,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x72, 0x67, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x95, 0x02, 0x0a, 0x17, 0x4c, 0x6f, 0x61,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa3, 0x01, 0x0a, 0x25, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x43, 0x6f, 0x70, 0x69, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74,
	0x68, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x21, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x73, 0x1a, 0x54, 0x0a, 0x26, 0x43, 0x6f,
	0x70, 0x69, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xe9, 0x05, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x63, 0x6b,
	0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x51, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70,
	0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x67, 0x73,
	0x2e, 0x55, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41,
	0x72, 0x67, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6d, 0x64, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x41, 0x72, 0x67, 0x73, 0x12, 0x5e,
	0x0a, 0x0f, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x76, 0x5f, 0x76, 0x61, 0x72,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x67, 0x73, 0x2e, 0x44, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0d, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x73, 0x12, 0x44,
	0x0a, 0x1f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x76, 0x6f, 0x6c, 0x5f, 0x6d, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x73, 0x75, 0x69, 0x74, 0x65, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x6c, 0x4d, 0x6e, 0x74, 0x44, 0x69, 0x72,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x86, 0x01, 0x0a, 0x1d, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x69,
	0x72, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x61,
	0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x67,
	0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x70, 0x61, 0x74, 0x68, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x1a, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x70, 0x61, 0x74, 0x68, 0x73, 0x1a, 0x3c, 0x0a,
	0x0e, 0x55, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x44,
	0x6f, 0x63, 0x6b, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4d, 0x0a,
	0x1f, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x70, 0x61, 0x74, 0x68, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8f, 0x02, 0x0a,
	0x14, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x1d, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x62,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e,
	0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x19, 0x75, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x1a, 0x6c, 0x0a, 0x1e, 0x55, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x48, 0x6f, 0x73,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x57,
	0x0a, 0x0b, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x70,
	0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x33, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x81, 0x01, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x12, 0x4e, 0x0a, 0x24, 0x73, 0x75, 0x69, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x64, 0x69, 0x72, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20,
	0x73, 0x75, 0x69, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x70, 0x61, 0x74, 0x68,
	0x22, 0x77, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x1e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1b, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0xa7, 0x04, 0x0a, 0x0f, 0x52, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x12, 0x68, 0x0a,
	0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x61, 0x70, 0x69, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x71, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x59, 0x0a, 0x12, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x6a, 0x0a, 0x16, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x70, 0x0a, 0x19, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xb2, 0x01, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x0e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x53, 0x65, 0x74, 0x1a, 0x3f, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xeb, 0x01, 0x0a, 0x14, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x64, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x61, 0x70, 0x69,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x6d, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x38, 0x0a, 0x17, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x22, 0x53, 0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41,
	0x72, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x61, 0x72,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x41, 0x72, 0x67, 0x73, 0x22, 0x51, 0x0a, 0x13, 0x45, 0x78, 0x65, 0x63, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x65, 0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67,
	0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6c,
	0x6f, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x91, 0x02, 0x0a, 0x1f, 0x57, 0x61, 0x69,
	0x74, 0x46, 0x6f, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x13, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x54, 0x65, 0x78, 0x74, 0x22, 0x4a, 0x0a, 0x17,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x41, 0x72, 0x67, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x32, 0xdb, 0x0a, 0x0a, 0x13, 0x41, 0x70, 0x69,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x49, 0x0a, 0x0a, 0x4c, 0x6f, 0x61, 0x64, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x12, 0x21,
	0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x41, 0x72, 0x67,
	0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0d, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x12, 0x24, 0x2e, 0x61,
	0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x41, 0x72,
	0x67, 0x73, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x4c, 0x61,
	0x6d, 0x62, 0x64, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x24, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x6d,
	0x62, 0x64, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x67, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x2a, 0x2e, 0x61,
	0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0d, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x61, 0x70,
	0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x72, 0x67,
	0x73, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a,
	0x13, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x72, 0x67, 0x73,
	0x1a, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x67, 0x0a, 0x0f, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x2a, 0x2e,
	0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0c, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x23, 0x2e, 0x61, 0x70,
	0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x67, 0x73,
	0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x2e,
	0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x41, 0x72, 0x67, 0x73, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x4f, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x5b, 0x0a, 0x0b, 0x45, 0x78, 0x65, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x22,
	0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72,
	0x67, 0x73, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x1b,
	0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x32, 0x2e, 0x61, 0x70,
	0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x72, 0x67, 0x73, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x13, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x42, 0x75, 0x6c, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73,
	0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x42, 0x75, 0x6c, 0x6b,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x50, 0x5a, 0x4e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x75, 0x72, 0x74, 0x6f, 0x73, 0x69, 0x73, 0x2d, 0x74, 0x65,
	0x63, 0x68, 0x2f, 0x6b, 0x75, 0x72, 0x74, 0x6f, 0x73, 0x69, 0x73, 0x2d, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x6b, 0x75, 0x72, 0x74, 0x6f, 0x73,
	0x69, 0x73, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x5f,
	0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_container_service_proto_rawDescOnce sync.Once
	file_api_container_service_proto_rawDescData = file_api_container_service_proto_rawDesc
)

func file_api_container_service_proto_rawDescGZIP() []byte {
	file_api_container_service_proto_rawDescOnce.Do(func() {
		file_api_container_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_container_service_proto_rawDescData)
	})
	return file_api_container_service_proto_rawDescData
}

var file_api_container_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_container_service_proto_msgTypes = make([]protoimpl.MessageInfo, 42)
var file_api_container_service_proto_goTypes = []interface{}{
	(FileGenerationOptions_FileTypeToGenerate)(0), // 0: api_container_api.FileGenerationOptions.FileTypeToGenerate
	(*LoadLambdaArgs)(nil),                        // 1: api_container_api.LoadLambdaArgs
	(*ExecuteLambdaArgs)(nil),                     // 2: api_container_api.ExecuteLambdaArgs
	(*ExecuteLambdaResponse)(nil),                 // 3: api_container_api.ExecuteLambdaResponse
	(*GetLambdaInfoArgs)(nil),                     // 4: api_container_api.GetLambdaInfoArgs
	(*GetLambdaInfoResponse)(nil),                 // 5: api_container_api.GetLambdaInfoResponse
	(*RegisterServiceArgs)(nil),                   // 6: api_container_api.RegisterServiceArgs
	(*RegisterServiceResponse)(nil),               // 7: api_container_api.RegisterServiceResponse
	(*GenerateFilesArgs)(nil),                     // 8: api_container_api.GenerateFilesArgs
	(*FileGenerationOptions)(nil),                 // 9: api_container_api.FileGenerationOptions
	(*GenerateFilesResponse)(nil),                 // 10: api_container_api.GenerateFilesResponse
	(*RegisterStaticFilesArgs)(nil),               // 11: api_container_api.RegisterStaticFilesArgs
	(*RegisterStaticFilesResponse)(nil),           // 12: api_container_api.RegisterStaticFilesResponse
	(*LoadStaticFilesArgs)(nil),                   // 13: api_container_api.LoadStaticFilesArgs
	(*LoadStaticFilesResponse)(nil),               // 14: api_container_api.LoadStaticFilesResponse
	(*StartServiceArgs)(nil),                      // 15: api_container_api.StartServiceArgs
	(*StartServiceResponse)(nil),                  // 16: api_container_api.StartServiceResponse
	(*PortBinding)(nil),                           // 17: api_container_api.PortBinding
	(*GetServiceInfoArgs)(nil),                    // 18: api_container_api.GetServiceInfoArgs
	(*GetServiceInfoResponse)(nil),                // 19: api_container_api.GetServiceInfoResponse
	(*RemoveServiceArgs)(nil),                     // 20: api_container_api.RemoveServiceArgs
	(*RepartitionArgs)(nil),                       // 21: api_container_api.RepartitionArgs
	(*PartitionServices)(nil),                     // 22: api_container_api.PartitionServices
	(*PartitionConnections)(nil),                  // 23: api_container_api.PartitionConnections
	(*PartitionConnectionInfo)(nil),               // 24: api_container_api.PartitionConnectionInfo
	(*ExecCommandArgs)(nil),                       // 25: api_container_api.ExecCommandArgs
	(*ExecCommandResponse)(nil),                   // 26: api_container_api.ExecCommandResponse
	(*WaitForEndpointAvailabilityArgs)(nil),       // 27: api_container_api.WaitForEndpointAvailabilityArgs
	(*ExecuteBulkCommandsArgs)(nil),               // 28: api_container_api.ExecuteBulkCommandsArgs
	nil,                                           // 29: api_container_api.GenerateFilesArgs.FilesToGenerateEntry
	nil,                                           // 30: api_container_api.GenerateFilesResponse.GeneratedFileRelativeFilepathsEntry
	nil,                                           // 31: api_container_api.RegisterStaticFilesArgs.StaticFilesSetEntry
	nil,                                           // 32: api_container_api.RegisterStaticFilesResponse.StaticFileDestRelativeFilepathsEntry
	nil,                                           // 33: api_container_api.LoadStaticFilesArgs.StaticFilesEntry
	nil,                                           // 34: api_container_api.LoadStaticFilesResponse.CopiedStaticFileRelativeFilepathsEntry
	nil,                                           // 35: api_container_api.StartServiceArgs.UsedPortsEntry
	nil,                                           // 36: api_container_api.StartServiceArgs.DockerEnvVarsEntry
	nil,                                           // 37: api_container_api.StartServiceArgs.FilesArtifactMountDirpathsEntry
	nil,                                           // 38: api_container_api.StartServiceResponse.UsedPortsHostPortBindingsEntry
	nil,                                           // 39: api_container_api.RepartitionArgs.PartitionServicesEntry
	nil,                                           // 40: api_container_api.RepartitionArgs.PartitionConnectionsEntry
	nil,                                           // 41: api_container_api.PartitionServices.ServiceIdSetEntry
	nil,                                           // 42: api_container_api.PartitionConnections.ConnectionInfoEntry
	(*emptypb.Empty)(nil),                         // 43: google.protobuf.Empty
}
var file_api_container_service_proto_depIdxs = []int32{
	29, // 0: api_container_api.GenerateFilesArgs.files_to_generate:type_name -> api_container_api.GenerateFilesArgs.FilesToGenerateEntry
	0,  // 1: api_container_api.FileGenerationOptions.file_type_to_generate:type_name -> api_container_api.FileGenerationOptions.FileTypeToGenerate
	30, // 2: api_container_api.GenerateFilesResponse.generated_file_relative_filepaths:type_name -> api_container_api.GenerateFilesResponse.GeneratedFileRelativeFilepathsEntry
	31, // 3: api_container_api.RegisterStaticFilesArgs.static_files_set:type_name -> api_container_api.RegisterStaticFilesArgs.StaticFilesSetEntry
	32, // 4: api_container_api.RegisterStaticFilesResponse.static_file_dest_relative_filepaths:type_name -> api_container_api.RegisterStaticFilesResponse.StaticFileDestRelativeFilepathsEntry
	33, // 5: api_container_api.LoadStaticFilesArgs.static_files:type_name -> api_container_api.LoadStaticFilesArgs.StaticFilesEntry
	34, // 6: api_container_api.LoadStaticFilesResponse.copied_static_file_relative_filepaths:type_name -> api_container_api.LoadStaticFilesResponse.CopiedStaticFileRelativeFilepathsEntry
	35, // 7: api_container_api.StartServiceArgs.used_ports:type_name -> api_container_api.StartServiceArgs.UsedPortsEntry
	36, // 8: api_container_api.StartServiceArgs.docker_env_vars:type_name -> api_container_api.StartServiceArgs.DockerEnvVarsEntry
	37, // 9: api_container_api.StartServiceArgs.files_artifact_mount_dirpaths:type_name -> api_container_api.StartServiceArgs.FilesArtifactMountDirpathsEntry
	38, // 10: api_container_api.StartServiceResponse.used_ports_host_port_bindings:type_name -> api_container_api.StartServiceResponse.UsedPortsHostPortBindingsEntry
	39, // 11: api_container_api.RepartitionArgs.partition_services:type_name -> api_container_api.RepartitionArgs.PartitionServicesEntry
	40, // 12: api_container_api.RepartitionArgs.partition_connections:type_name -> api_container_api.RepartitionArgs.PartitionConnectionsEntry
	24, // 13: api_container_api.RepartitionArgs.default_connection:type_name -> api_container_api.PartitionConnectionInfo
	41, // 14: api_container_api.PartitionServices.service_id_set:type_name -> api_container_api.PartitionServices.ServiceIdSetEntry
	42, // 15: api_container_api.PartitionConnections.connection_info:type_name -> api_container_api.PartitionConnections.ConnectionInfoEntry
	9,  // 16: api_container_api.GenerateFilesArgs.FilesToGenerateEntry.value:type_name -> api_container_api.FileGenerationOptions
	17, // 17: api_container_api.StartServiceResponse.UsedPortsHostPortBindingsEntry.value:type_name -> api_container_api.PortBinding
	22, // 18: api_container_api.RepartitionArgs.PartitionServicesEntry.value:type_name -> api_container_api.PartitionServices
	23, // 19: api_container_api.RepartitionArgs.PartitionConnectionsEntry.value:type_name -> api_container_api.PartitionConnections
	24, // 20: api_container_api.PartitionConnections.ConnectionInfoEntry.value:type_name -> api_container_api.PartitionConnectionInfo
	1,  // 21: api_container_api.ApiContainerService.LoadLambda:input_type -> api_container_api.LoadLambdaArgs
	2,  // 22: api_container_api.ApiContainerService.ExecuteLambda:input_type -> api_container_api.ExecuteLambdaArgs
	4,  // 23: api_container_api.ApiContainerService.GetLambdaInfo:input_type -> api_container_api.GetLambdaInfoArgs
	6,  // 24: api_container_api.ApiContainerService.RegisterService:input_type -> api_container_api.RegisterServiceArgs
	8,  // 25: api_container_api.ApiContainerService.GenerateFiles:input_type -> api_container_api.GenerateFilesArgs
	11, // 26: api_container_api.ApiContainerService.RegisterStaticFiles:input_type -> api_container_api.RegisterStaticFilesArgs
	13, // 27: api_container_api.ApiContainerService.LoadStaticFiles:input_type -> api_container_api.LoadStaticFilesArgs
	15, // 28: api_container_api.ApiContainerService.StartService:input_type -> api_container_api.StartServiceArgs
	18, // 29: api_container_api.ApiContainerService.GetServiceInfo:input_type -> api_container_api.GetServiceInfoArgs
	20, // 30: api_container_api.ApiContainerService.RemoveService:input_type -> api_container_api.RemoveServiceArgs
	21, // 31: api_container_api.ApiContainerService.Repartition:input_type -> api_container_api.RepartitionArgs
	25, // 32: api_container_api.ApiContainerService.ExecCommand:input_type -> api_container_api.ExecCommandArgs
	27, // 33: api_container_api.ApiContainerService.WaitForEndpointAvailability:input_type -> api_container_api.WaitForEndpointAvailabilityArgs
	28, // 34: api_container_api.ApiContainerService.ExecuteBulkCommands:input_type -> api_container_api.ExecuteBulkCommandsArgs
	43, // 35: api_container_api.ApiContainerService.LoadLambda:output_type -> google.protobuf.Empty
	3,  // 36: api_container_api.ApiContainerService.ExecuteLambda:output_type -> api_container_api.ExecuteLambdaResponse
	5,  // 37: api_container_api.ApiContainerService.GetLambdaInfo:output_type -> api_container_api.GetLambdaInfoResponse
	7,  // 38: api_container_api.ApiContainerService.RegisterService:output_type -> api_container_api.RegisterServiceResponse
	10, // 39: api_container_api.ApiContainerService.GenerateFiles:output_type -> api_container_api.GenerateFilesResponse
	12, // 40: api_container_api.ApiContainerService.RegisterStaticFiles:output_type -> api_container_api.RegisterStaticFilesResponse
	14, // 41: api_container_api.ApiContainerService.LoadStaticFiles:output_type -> api_container_api.LoadStaticFilesResponse
	16, // 42: api_container_api.ApiContainerService.StartService:output_type -> api_container_api.StartServiceResponse
	19, // 43: api_container_api.ApiContainerService.GetServiceInfo:output_type -> api_container_api.GetServiceInfoResponse
	43, // 44: api_container_api.ApiContainerService.RemoveService:output_type -> google.protobuf.Empty
	43, // 45: api_container_api.ApiContainerService.Repartition:output_type -> google.protobuf.Empty
	26, // 46: api_container_api.ApiContainerService.ExecCommand:output_type -> api_container_api.ExecCommandResponse
	43, // 47: api_container_api.ApiContainerService.WaitForEndpointAvailability:output_type -> google.protobuf.Empty
	43, // 48: api_container_api.ApiContainerService.ExecuteBulkCommands:output_type -> google.protobuf.Empty
	35, // [35:49] is the sub-list for method output_type
	21, // [21:35] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_api_container_service_proto_init() }
func file_api_container_service_proto_init() {
	if File_api_container_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_container_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadLambdaArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteLambdaArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteLambdaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLambdaInfoArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLambdaInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterServiceArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterServiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateFilesArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileGenerationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateFilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterStaticFilesArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterStaticFilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadStaticFilesArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadStaticFilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartServiceArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartServiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortBinding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceInfoArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveServiceArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepartitionArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionServices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionConnections); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionConnectionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecCommandArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecCommandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitForEndpointAvailabilityArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_container_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteBulkCommandsArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_container_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   42,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_container_service_proto_goTypes,
		DependencyIndexes: file_api_container_service_proto_depIdxs,
		EnumInfos:         file_api_container_service_proto_enumTypes,
		MessageInfos:      file_api_container_service_proto_msgTypes,
	}.Build()
	File_api_container_service_proto = out.File
	file_api_container_service_proto_rawDesc = nil
	file_api_container_service_proto_goTypes = nil
	file_api_container_service_proto_depIdxs = nil
}
